FIND_PACKAGE(SWIG REQUIRED)
FIND_PACKAGE(Ruby REQUIRED)

SET( SWIG_INPUT ${CMAKE_CURRENT_SOURCE_DIR}/ettercap.i )
SET(SWIG_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/ettercap_ruby_swig.c")
SET(SWIG_HEADER_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/ruby_swig.h")

SET(SWIG_INCLUDE_ARGS)
FOREACH(it ${EC_INCLUDE} ${EC_INCLUDE_PATH} ${CMAKE_INCLUDE_PATH})
  SET(SWIG_INCLUDE_ARGS ${SWIG_INCLUDE_ARGS} "-I${it}")
ENDFOREACH(it)

# Generates the ruby SWIG bindings.
ADD_CUSTOM_COMMAND(
  OUTPUT ${SWIG_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E echo_append "Creating wrapper code for ruby..."
  COMMAND ${SWIG_EXECUTABLE} -ruby -o ${SWIG_OUTPUT} ${SWIG_INCLUDE_ARGS} ${SWIG_INPUT}
  COMMAND ${CMAKE_COMMAND} -E echo "Done."
  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.i
  )

# Generates the ruby SWIG bindings.
ADD_CUSTOM_COMMAND(
  OUTPUT ${SWIG_HEADER_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E echo_append "Creating swig header code for ruby..."
  COMMAND ${SWIG_EXECUTABLE} -ruby -external-runtime ${SWIG_HEADER_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E echo "Done."
  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
  )

SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
INCLUDE_DIRECTORIES(${RUBY_INCLUDE_DIRS} ${CMAKE_CURRENT_BINARY_DIR})

#add_library(dynamic_ruby MODULE ruby.c ${SWIG_OUTPUT} ${SWIG_HEADER_OUTPUT})
add_library(dynamic_ruby MODULE ruby.c)

target_link_libraries(dynamic_ruby ${RUBY_LIBRARY} ettercap)
set_target_properties(dynamic_ruby PROPERTIES PREFIX "ec_")

install(TARGETS
          dynamic_ruby 
        LIBRARY DESTINATION ${INSTALL_LIBDIR}/ettercap/
        PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE
                    GROUP_READ GROUP_EXECUTE
                    WORLD_READ WORLD_EXECUTE)

