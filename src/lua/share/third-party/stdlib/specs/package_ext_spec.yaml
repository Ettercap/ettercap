specify package_ext:
- before:
    unextended = require "package_ext"
- context when requiring the module:
  - before: |
      -- do not try to check all the entries in unextended package,
      -- because they naturally change as modules are loaded.
      apis = { "config", "cpath", "loaders", "loadlib", "preload",
               "searchers", "searchpath", "seeall" }

  - it returns the unextended package table:
      expect (unextended.config).should_be (package.config)
      expect (unextended.dirsep).should_be (nil)
      expect (unextended.pathsep).should_be (nil)
      expect (unextended.path_mark).should_be (nil)
      expect (unextended.execdir).should_be (nil)
      expect (unextended.igmark).should_be (nil)
  - "it splits package.config up":
      expect (string.format ("%s\n%s\n%s\n%s\n%s\n",
              package.dirsep, package.pathsep, package.path_mark, package.execdir, package.igmark)
      ).should_contain (package.config)
  - it does not override any other module access points:
      for _, api in ipairs (apis) do
        expect (package[api]).should_be (unextended[api])
      end
